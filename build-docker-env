#!/bin/bash

function usage() {
        echo -e
        echo -e "Usage:"
        echo -e "\t$0 [OPTION]"
        echo -e
        echo -e "\t-c Name for containers. ( Defaults = pg)"
        echo -e "\t-n number of of containers. (default = 1)"
        echo -e "\t-s Subnet. First 3 octets only. Example  172.28.100 "
        echo -e "\t-w Name for docker network to create (default = pgnet)"
        echo -e "\t-y Create the netork. Otherwise, just use the existing network"
        echo -e "\t-m Setup postgres environment to use md5 password_encription"
        echo -e "\t-p Password for user postgres. If usinmg special characters like #! etc .. escape them with a \ ( default = \"postgres\" )"
        echo -e "\t-i docker image to use. Must be one of the images listed in the repo's README. ( default = rocky9_pg17_pgpool )"
        echo -e
        exit
}


function createNetwork() {
echo -e "\tdocker network create \
--driver bridge \
--subnet $subnet \
--gateway $gateway \
$netName " >> $dockerRunFile
}


function createNode() {
echo -e "\tdocker run \
-p $pgPortMap:5432 \
-p $poolPortMap:9999 \
--env=PGPASSWORD=$pgPassword \
-v ${nodeName}-pgdata:/pgdata \
--hostname=$nodeName \
--network=$netName \
--name=$nodeName \
--privileged \
--ip $nodeIp \
$md5 \
-dt rocky9_pg17_pgpool " >> $dockerRunFile
}



# --- Find any used postgres by docker and get the next availabe for mapping
function getPgPorts() {
   lastPgUsed=""
   lastPgUsed=$(docker ps --format "{{.Ports}}" | grep 5432 |  sed -n 's/.*0\.0\.0\.0:\([0-9]*\)->5432\/tcp.*/\1/p' | sort | tail -1);
}


# --- Find any used pgpool ports by docker and get the next availabe for mapping
function getPoolPorts() {
   lastPoolUsed=""
   lastPoolUsed=$(docker ps --format "{{.Ports}}" | grep 9999 |  sed -n 's/.*0\.0\.0\.0:\([0-9]*\)->9999\/tcp.*/\1/p' | sort | tail -1);
}


# --- Find last IP used by docker network and subnet. Then use next available ip for the subnet
function getIpInUse() {
   lastIp=$(docker network inspect poolnet --format '{{range .Containers}}{{.IPv4Address}}{{"\n"}}{{end}}' | awk 'NF' | awk -F "." '{print $4}' | awk -F "/" '{print $1'} | sort | tail -1)
   lastSub=$(docker network inspect poolnet --format '{{range .Containers}}{{.IPv4Address}}{{"\n"}}{{end}}' | awk 'NF' | awk -F "." '{print $1 "." $2 "." $3 }' | tail -1)
   nextSubIp=$(( lastIp + 1 ))
}


# --- Check to see if containers already exist using the name you provided. Only prefix is used. So a contaner name of pg would get pg1,pg2 and pg3 if you specified 3 nodes
function checkExistingContainers() {
   containerNameList=$(docker ps -a --format "{{.Names}}")
   tempNameList=$(echo "$containerNameList" | tr -d '0-9')
   containerNameList=$(echo $containerNameList | tr \n " ")

   if [[ "$tempNameList" =~ "$nodeName" ]]; then
      echo -e
      echo -e "ERROR -- Container conflict: \"$nodeName\" already exists in the list of docker containers on this host \"$containerNameList\" "
      echo -e
      exit
   fi
}

# --- See if the subnet you are wanting to use already exists. If it does, ignore the subnet address passed and use ip from existing subnet
function checkExistingSubnet() {
   subnetList=$(docker network ls -q | xargs docker network inspect --format '{{.Name}}: {{range .IPAM.Config}}{{.Subnet}} {{end}}' | awk -F : '{print $2}' | awk 'NF' | awk -F'.' '{print $1"."$2"."$3}')
   if [[ "$subnetList" =~ "$sub" ]]; then
      echo -e
      echo -e "ERROR -- Subnet conflict: \"$sub\" is already in use for existing networks. For more details, run the following command:"
      echo -e
      echo -e "\tdocker network ls -q | xargs docker network inspect --format '{{.Name}}: {{range .IPAM.Config}}{{.Subnet}} {{end}}'"
      echo -e
      exit
   fi 
}


# --- Check if the docker image exists
function checkImageExists() {
   imageExists=$(docker images | grep -w $dockerImage | wc -l)
   if [ $imageExists -eq 0 ]; then
      echo -e
      echo -e "ERROR -- The necessary docker image \"$dockerImage\" does not exist. Please clone from the repo and run \"docker build -t $dockerImage .\" from within the folder containing the docker files"
      echo -e
      exit
   fi
}


# --- Check if the network you want is already there
function checkNetworkExists() {
   networkExists=$(docker network ls | grep -w $netName | wc -l)
   if [[ $networkExists -ge 1 && $dockerCreateNetwork -eq 1 ]]; then
      echo -e
      echo -e "ERROR -- The network \"$netName\" already exist. run without -y option to use this network"
      echo -e
      exit
   fi
}



# --- Validate is numeric
function checkNumber() {
   num=$1
   var=$2
   valid=0
   regexp='^[0-9]+$'
   if ! [[ $num =~ $regexp ]] ; then
      echo -e
      echo -e "ERROR -- Invalid format: Only numbers are allowed. \"$num\" entered for \"$var\". Please correct and try again"
      echo -e
      exit
   fi
}



# --- validate its alpha only and lower case
function checkAlpha() {
   str=$1
   var=$2
   valid=0
   regexp='^[a-z]+$'
   if ! [[ $str =~ $regexp ]] ; then
      echo -e
      echo -e "ERROR -- Invalid format: Only lower case letters are allowed. No special characters. \"$str\" entered for \"$var\". Please correct and try again"
      echo -e
      exit
   fi
}
  

# --- Check subnet. make sure its valid format and less than 255
function checkSubnet() {
   str=$1
   var=$2
   valid=0
   # Regex for three octets: nnn.nnn.nnn where nnn is 0â€“255
   if [[ "$sub" =~ ^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})$ ]]; then
     # Validate each octet is <= 255
     if (( ${BASH_REMATCH[1]} <= 255 && ${BASH_REMATCH[2]} <= 255 && ${BASH_REMATCH[3]} <= 255 )); then
        return
     else
        echo -e
        echo -e "ERROR -- Invalid subnet: One or more octet is > 255 \"$sub\" entered for \"$var\". Please correct and try again"
        echo -e
        exit
     fi
   else
     echo -e
     echo -e "ERROR -- Invalid format: \"$sub\" entered for \"$var\". Please correct and try again"
     echo -e
     exit
   fi

}



# --- Set some default values
numNodes=1
nodeName="pg"
md5=""
pgPassword="postgres"
dockerImage="rocky9_pg17_pgpool"
dockerCreateNetwork=0

# ---  Here we go ....
while getopts c:n:s:w:p:i:my name
do      
   case $name in
      c) nodeName="$OPTARG";;
      n) numNodes="$OPTARG";; 
      s) sub="$OPTARG";; 
      w) netName="$OPTARG";; 
      y) dockerCreateNetwork=1;;
      m) md5="--env=MD5=1";; 
      p) pgPassword="$OPTARG";; 
      i) dockerImage="$OPTARG";; 
      *) usage;;
      ?) usage;;
   esac 
done    
shift $(($OPTIND - 1))

if [ -z "$sub" ] || [ -z "$netName" ]; then
   usage
fi


checkAlpha  $nodeName "-N"
checkNumber $numNodes "-n"
checkAlpha $netName "-t"
checkSubnet $sub "-s"
checkImageExists
checkExistingSubnet
checkExistingContainers
checkNetworkExists


# --- We are generating a shell script to manage our containers. A poorman's docker-compose

dockerRunFile="DockerRunThis.${nodeName}"
echo -e "#!/bin/bash\n" > $dockerRunFile

tempNodeName=$nodeName
subnet="${sub}.0/24"
gateway="${sub}.1"


# --- Lets see port mappings used by docker for 5432 ( postgres ) then use next available
getPgPorts

if [ -n "$lastPgUsed" ]; then 
   nextPgPort=$(( lastPgUsed + 1 ))
else 
   nextPgPort="6431"
fi

# --- Lets see port mappings used by docker for 9999 ( pgpool ) then use next available
getPoolPorts

if [ -n "$lastPoolUsed" ]; then 
   nextPoolPort=$(( lastPoolUsed + 1 ))
else 
   nextPoolPort="9991"
fi



if [ $dockerCreateNetwork -eq 0 ]; then
   getIpInUse
   echo -e "function runNetwork() {" >> $dockerRunFile
   echo -e "\techo \"INFO -- The network $netName already exists. Using subnet $lastSub associated with $netName and ignoring $sub\"" >> $dockerRunFile
   echo -e "}" >> $dockerRunFile
   echo -e
   echo -e "INFO -- The network $netName already exists. Using subnet $lastSub associated with $netName and ignoring $sub" 
fi


echo -e >> $dockerRunFile
echo -e >> $dockerRunFile


if [ $dockerCreateNetwork -eq 1 ]; then
   echo -e "function runNetwork() {" >> $dockerRunFile
   createNetwork
   echo -e "}" >> $dockerRunFile
fi


echo -e >> $dockerRunFile
echo -e >> $dockerRunFile


# --- Lets put everyting into a function so we can build our reusable script

echo -e "function runContainers() {" >> $dockerRunFile
echo -e "\trunNetwork" >> $dockerRunFile

nodeList=""
volumeList=""

for (( i=1; i<=$numNodes; i++ )); do
   # Dont start with one for ip address since that s reserver for the gateway
   if [ $dockerCreateNetwork -eq 0 ]; then
      getIpInUse
      nextIp=$(( i + nextSubIp ))
      sub=$lastSub
   else
      nextIp=$(( i + 10 ))
   fi
   nodeName="${tempNodeName}${i}"
   nodeIp="${sub}.${nextIp}"
   pgPortMap=$(( nextPgPort + $i ))
   poolPortMap=$(( nextPoolPort + $i ))
   nodeList="${nodeList} ${nodeName}"
   volumeList="${volumeList}  ${nodeName}-pgdata"
   createNode
done
echo -e "}" >> $dockerRunFile

echo -e >> $dockerRunFile
echo -e >> $dockerRunFile


echo -e "function stopContainers() {" >> $dockerRunFile
   echo -e "\tdocker stop $nodeList" >> $dockerRunFile
echo -e "}" >> $dockerRunFile

echo -e >> $dockerRunFile
echo -e >> $dockerRunFile



echo -e "function startContainers() {" >> $dockerRunFile
   echo -e "\tdocker start $nodeList" >> $dockerRunFile
echo -e "}" >> $dockerRunFile

echo -e >> $dockerRunFile
echo -e >> $dockerRunFile



echo -e "function removeContainers() {" >> $dockerRunFile
   echo -e "\tdocker rm $nodeList" >> $dockerRunFile
echo -e "}" >> $dockerRunFile

echo -e >> $dockerRunFile
echo -e >> $dockerRunFile



# --- If removing a network used by other containers, the docker network rm will not work
# --- Since other containers are using it

echo -e "function removeNetwork() {" >> $dockerRunFile
   echo -e "\tdocker network rm $netName" >> $dockerRunFile
echo -e "}" >> $dockerRunFile

echo -e >> $dockerRunFile
echo -e >> $dockerRunFile


echo -e "function removeVolumes() {" >> $dockerRunFile
   echo -e "\tdocker volume rm $volumeList" >> $dockerRunFile
echo -e "}" >> $dockerRunFile

echo -e >> $dockerRunFile
echo -e >> $dockerRunFile



echo -e "function deleteEnv() {" >> $dockerRunFile
   echo -e "\tstopContainers" >> $dockerRunFile
   echo -e "\tremoveContainers" >> $dockerRunFile
   echo -e "\tremoveNetwork" >> $dockerRunFile
   echo -e "\tif [ \$force -eq 1 ]; then" >> $dockerRunFile
   echo -e "\t\tremoveVolumes" >> $dockerRunFile
   echo -e "\tfi" >> $dockerRunFile
echo -e "}" >> $dockerRunFile

echo -e >> $dockerRunFile
echo -e >> $dockerRunFile


echo -e "function usage() {" >> $dockerRunFile
echo -e " \techo -e \"Usage:\"
\techo -e \"\$0 [OPTION]\"
\techo -e \"\t-a OPTIONS [start stop run rm rmvolumes delete createnetwork] \"
\techo -e \"\t-f force the delete of volumes. Otherwise, they are preserved\"
\texit " >> $dockerRunFile
echo -e "}" >> $dockerRunFile

echo -e >> $dockerRunFile
echo -e >> $dockerRunFile


echo -e "force=0" >> $dockerRunFile
echo -e "doThis=\"\"" >> $dockerRunFile

echo -e "
while getopts a:f name
do
   case \$name in
      a) doThis=\"\$OPTARG\";;
      f) force=1;;
      *) usage;;
      ?) usage;;
   esac
done
shift \$((\$OPTIND - 1))
" >> $dockerRunFile


echo -e >> $dockerRunFile
echo -e >> $dockerRunFile


echo -e "
case \$doThis in
   \"start\") startContainers;;  
   \"stop\") stopContainers;;  
   \"run\") runContainers;;  
   \"rm\") removeContainers;;  
   \"rmvolumes\") removeVolumes;;  
   \"createnetwork\") createNetwork;;  
   \"delete\") deleteEnv;;  
   *) usage;;
   ?) usage;;
esac 
" >> $dockerRunFile


echo -e >> $dockerRunFile
echo -e >> $dockerRunFile



chmod 700 $dockerRunFile

echo 
echo "The following file: ${dockerRunFile},  contains the needed docker run commands"
echo 

if [[ $networkExists -eq 0 && $dockerCreateNetwork -eq 0 ]]; then
   echo -e
   echo -e "\tALERT -- Before starting the containers you must manually create the network $netName as shown below. Or run the command again with the -y option"
   echo -e
   echo -e "\tdocker network create --driver bridge --subnet $subnet --gateway $gateway $netName " 
   echo -e
fi

